"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/games/roulette/page",{

/***/ "(app-pages-browser)/./src/lib/gameSessionStorage.ts":
/*!***************************************!*\
  !*** ./src/lib/gameSessionStorage.ts ***!
  \***************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateUserStats: () => (/* binding */ calculateUserStats),\n/* harmony export */   clearGameSessions: () => (/* binding */ clearGameSessions),\n/* harmony export */   getDailyStats: () => (/* binding */ getDailyStats),\n/* harmony export */   getGameSessions: () => (/* binding */ getGameSessions),\n/* harmony export */   getGameSessionsByType: () => (/* binding */ getGameSessionsByType),\n/* harmony export */   getGameTypeStats: () => (/* binding */ getGameTypeStats),\n/* harmony export */   getRecentGameSessions: () => (/* binding */ getRecentGameSessions),\n/* harmony export */   getUserGameSessions: () => (/* binding */ getUserGameSessions),\n/* harmony export */   saveGameSession: () => (/* binding */ saveGameSession)\n/* harmony export */ });\n// Game Session Management für localStorage\n// Spielsession speichern\nfunction saveGameSession(session) {\n    try {\n        const existingSessions = getGameSessions();\n        const newSession = {\n            ...session,\n            id: generateSessionId(),\n            date: new Date().toISOString()\n        };\n        const updatedSessions = [\n            ...existingSessions,\n            newSession\n        ];\n        // Nur die letzten 1000 Sessions behalten\n        if (updatedSessions.length > 1000) {\n            updatedSessions.splice(0, updatedSessions.length - 1000);\n        }\n        localStorage.setItem('casino_game_sessions', JSON.stringify(updatedSessions));\n        return newSession;\n    } catch (error) {\n        console.error('Fehler beim Speichern der Spielsession:', error);\n        return null;\n    }\n}\n// Alle Spielsessions laden\nfunction getGameSessions() {\n    try {\n        const savedSessions = localStorage.getItem('casino_game_sessions');\n        return savedSessions ? JSON.parse(savedSessions) : [];\n    } catch (error) {\n        console.error('Fehler beim Laden der Spielsessions:', error);\n        return [];\n    }\n}\n// Letzte N Spielsessions laden\nfunction getRecentGameSessions() {\n    let limit = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 10;\n    const sessions = getGameSessions();\n    return sessions.slice(-limit).reverse(); // Neueste zuerst\n}\n// Spielsessions für einen bestimmten Benutzer laden\nfunction getUserGameSessions(userId) {\n    const sessions = getGameSessions();\n    return sessions.filter((session)=>session.userId === userId);\n}\n// Spielsessions nach Spieltyp filtern\nfunction getGameSessionsByType(gameType) {\n    const sessions = getGameSessions();\n    return sessions.filter((session)=>session.gameType === gameType);\n}\n// Alle Spielsessions löschen\nfunction clearGameSessions() {\n    try {\n        localStorage.removeItem('casino_game_sessions');\n        return true;\n    } catch (error) {\n        console.error('Fehler beim Löschen der Spielsessions:', error);\n        return false;\n    }\n}\n// Session ID generieren\nfunction generateSessionId() {\n    return 'session_' + Date.now() + '_' + Math.random().toString(36).substring(2);\n}\n// Statistiken berechnen\nfunction calculateUserStats(sessions) {\n    if (sessions.length === 0) {\n        return {\n            totalGames: 0,\n            totalWins: 0,\n            totalLosses: 0,\n            totalPushes: 0,\n            totalWagered: 0,\n            totalWon: 0,\n            netProfit: 0,\n            winRate: 0,\n            favoriteGame: null,\n            biggestWin: 0,\n            biggestLoss: 0,\n            averageBet: 0,\n            averageWin: 0,\n            sessionsToday: 0,\n            profitToday: 0\n        };\n    }\n    const totalGames = sessions.length;\n    const totalWins = sessions.filter((s)=>s.result === 'win').length;\n    const totalLosses = sessions.filter((s)=>s.result === 'lose').length;\n    const totalPushes = sessions.filter((s)=>s.result === 'push').length;\n    const totalWagered = sessions.reduce((sum, s)=>sum + s.betAmount, 0);\n    const totalWon = sessions.reduce((sum, s)=>sum + s.winAmount, 0);\n    const netProfit = sessions.reduce((sum, s)=>sum + s.profit, 0);\n    const winRate = totalGames > 0 ? totalWins / totalGames * 100 : 0;\n    // Beliebtestes Spiel\n    const gameTypeCounts = sessions.reduce((counts, session)=>{\n        counts[session.gameType] = (counts[session.gameType] || 0) + 1;\n        return counts;\n    }, {});\n    const favoriteGame = Object.keys(gameTypeCounts).length > 0 ? Object.entries(gameTypeCounts).reduce((a, b)=>gameTypeCounts[a[0]] > gameTypeCounts[b[0]] ? a : b)[0] : null;\n    const biggestWin = Math.max(...sessions.map((s)=>s.profit), 0);\n    const biggestLoss = Math.min(...sessions.map((s)=>s.profit), 0);\n    const averageBet = totalWagered / totalGames;\n    const averageWin = totalWins > 0 ? totalWon / totalWins : 0;\n    // Sessions und Profit heute\n    const today = new Date().toDateString();\n    const sessionsToday = sessions.filter((s)=>new Date(s.date).toDateString() === today).length;\n    const profitToday = sessions.filter((s)=>new Date(s.date).toDateString() === today).reduce((sum, s)=>sum + s.profit, 0);\n    return {\n        totalGames,\n        totalWins,\n        totalLosses,\n        totalPushes,\n        totalWagered,\n        totalWon,\n        netProfit,\n        winRate,\n        favoriteGame,\n        biggestWin,\n        biggestLoss,\n        averageBet,\n        averageWin,\n        sessionsToday,\n        profitToday\n    };\n}\n// Tägliche Statistiken für die letzten 7 Tage\nfunction getDailyStats(sessions) {\n    let days = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 7;\n    const result = [];\n    for(let i = days - 1; i >= 0; i--){\n        const date = new Date();\n        date.setDate(date.getDate() - i);\n        const dayStart = new Date(date);\n        dayStart.setHours(0, 0, 0, 0);\n        const dayEnd = new Date(date);\n        dayEnd.setHours(23, 59, 59, 999);\n        const daySessions = sessions.filter((session)=>{\n            const sessionDate = new Date(session.date);\n            return sessionDate >= dayStart && sessionDate <= dayEnd;\n        });\n        const profit = daySessions.reduce((sum, session)=>sum + session.profit, 0);\n        const gamesPlayed = daySessions.length;\n        const wagered = daySessions.reduce((sum, session)=>sum + session.betAmount, 0);\n        const won = daySessions.reduce((sum, session)=>sum + session.winAmount, 0);\n        result.push({\n            date: date.toLocaleDateString('de-DE', {\n                weekday: 'short'\n            }),\n            fullDate: date.toISOString().split('T')[0],\n            profit,\n            gamesPlayed,\n            wagered,\n            won\n        });\n    }\n    return result;\n}\n// Game-spezifische Statistiken\nfunction getGameTypeStats(sessions) {\n    const gameTypes = [\n        'blackjack',\n        'roulette',\n        'slots'\n    ];\n    return gameTypes.map((gameType)=>{\n        const gameSessions = sessions.filter((s)=>s.gameType === gameType);\n        const stats = calculateUserStats(gameSessions);\n        return {\n            gameType,\n            ...stats\n        };\n    });\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/gameSessionStorage.ts\n"));

/***/ })

});